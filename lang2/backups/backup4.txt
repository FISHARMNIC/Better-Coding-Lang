#define MAX_MEMORY 20
#define RETURN_FALSE 21

# Let the compiler designate some static memory for us
malloc_memory: (char*) (char:20)

# Where our memory segments will start
malloc_start: (int*) (int:20)

# Where out memory segments will end 
malloc_end: (int*) (int:20)

# Where to write into the start/end  
malloc_index: (int) 1

# Most recent free memory spot     
malloc_free_spot: (int) 0    

AI_param_value: (int)
AI_return: (int)
AI_i: (int)

M_position: (int)
M_free_bytes_read: (int) 0
M_where_in_arr: (int)
M_return: (int)

F_parameter_ptr: (int)
F_baseAddress: (int)
F_i: (int)
F_endValue: (int)

goto main
# --------------------------- FUNCTIONS ---------------------------------------
function array_includes
    AI_i = 0
    AI_return = RETURN_FALSE
    repeat(AI_i, MAX_MEMORY)
        if(malloc_start[AI_i] == AI_param_value)
            AI_return = AI_i
            return
        endif
        ++ AI_i
    end @repeat
end @function

function malloc int (int M_param_size)
    M_position = 0
    M_return = 0

    repeat(M_position, MAX_MEMORY)
    AI_param_value = M_position
        array_includes()
        # comment block here

        # if in a block
        if(AI_return != RETURN_FALSE)
            # jump out of the block
            M_position = malloc_end[AI_return]
            M_free_bytes_read = 0
        elif(M_free_bytes_read == M_param_size)
            # if im not in a block and the length is right
            malloc_end[malloc_index] = M_position
            malloc_start[malloc_index] = evaluate(M_position - M_param_size + 1)
            ++ malloc_index
            M_return = evaluate(malloc_memory + M_position - M_param_size)
            return M_return
        endif
        ++ M_free_bytes_read
        ++ M_position
    end @repeat
    ++ malloc_index
end @function

function free
    F_baseAddress = evaluate(F_parameter_ptr - malloc_memory + 1)
    AI_param_value = F_baseAddress
    array_includes()
    F_i = malloc_start[AI_return]
    F_endValue = malloc_end[AI_return]
    repeat(F_i, F_endValue)
        malloc_memory[F_i] = 0
        ++ F_i
    end @repeat

    malloc_start[AI_return] = 0
    malloc_end[AI_return] = 0
end @function
# ----------------------------- MAIN --------------------------------------
main:

myNumber: (int*) malloc(4) 
printLn(%i,myNumber)

secondNumber: (int*) malloc(8)
printLn(%i,M_return)

F_parameter_ptr = & myNumber
free()

printLn(%i,malloc(2))

printLn(%i,malloc(2))

printLn(%i,malloc(2))

